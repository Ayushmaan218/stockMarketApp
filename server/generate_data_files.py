# generate_data_files.py
#
# PURPOSE:
# This script reads local NSE CSVs and downloads live BSE data to create
# comprehensive Python dictionary files ('nse_tickers.py' and 'bse_tickers.py').
#
# HOW TO RUN:
# 1. Make sure 'requests' is installed: pip install requests
# 2. Place this script in your main 'server' directory with the NSE CSVs.
# 3. Run this script from your terminal: python generate_data_files.py

import pandas as pd
import os
import requests
import io

def create_ticker_files():
    """
    Reads local and remote CSV files to generate comprehensive ticker maps for NSE and BSE.
    """
    output_dir = 'data'
    os.makedirs(output_dir, exist_ok=True)
    with open(os.path.join(output_dir, '__init__.py'), 'w') as f:
        pass

    # --- 1. Process NSE Files (Local) ---
    try:
        print("Starting NSE ticker map generation...")
        nse_map = {}
        nse_csv_files = ['EQUITY_L.csv', 'ind_nifty50list.csv', 'ind_nifty500list.csv']
        
        for file in nse_csv_files:
            if os.path.exists(file):
                print(f"Reading data from '{file}'...")
                df = pd.read_csv(file)
                name_col = 'NAME OF COMPANY' if 'NAME OF COMPANY' in df.columns else 'Company Name'
                symbol_col = 'SYMBOL' if 'SYMBOL' in df.columns else 'Symbol'
                
                for _, row in df.iterrows():
                    company_name = str(row[name_col]).strip().upper()
                    symbol = str(row[symbol_col]).strip().upper()
                    if company_name and symbol:
                        ticker = f"{symbol}.NS"
                        nse_map[company_name] = ticker
                        nse_map[symbol] = ticker
            else:
                print(f"Warning: NSE file '{file}' not found. Skipping.")

        with open(os.path.join(output_dir, 'nse_tickers.py'), 'w', encoding='utf-8') as f:
            f.write("# This file is auto-generated by generate_data_files.py from local CSVs.\n\n")
            f.write("nse_data = {\n")
            for name, ticker in sorted(nse_map.items()):
                # --- FIX APPLIED HERE ---
                # Step 1: Create a "safe" name by escaping single quotes.
                safe_name = name.replace("'", "\\'")
                # Step 2: Use the safe name in the f-string.
                f.write(f"    '{safe_name}': '{ticker}',\n")
            f.write("}\n")
        print(f"-> Successfully created 'data/nse_tickers.py' with {len(nse_map)} entries.")

    except Exception as e:
        print(f"An error occurred while processing NSE files: {e}")

    # --- 2. Process BSE File (from URL) ---
    try:
        print("\nStarting BSE ticker map generation...")
        bse_url = 'https://raw.githubusercontent.com/riyaz-ali/bhav-copy/master/pipeline/bse_listed_companies.csv'
        print(f"Downloading data from '{bse_url}'...")
        
        response = requests.get(bse_url)
        response.raise_for_status() 
        
        df_bse = pd.read_csv(io.StringIO(response.text))
        bse_map = {}
        
        for _, row in df_bse.iterrows():
            company_name = str(row['Security Name']).strip().upper()
            symbol = str(row['Security Id']).strip().upper()
            if company_name and symbol:
                ticker = f"{symbol}.BO"
                bse_map[company_name] = ticker
                bse_map[symbol] = ticker

        with open(os.path.join(output_dir, 'bse_tickers.py'), 'w', encoding='utf-8') as f:
            f.write("# This file is auto-generated by generate_data_files.py from a remote CSV.\n\n")
            f.write("bse_data = {\n")
            for name, ticker in sorted(bse_map.items()):
                # --- FIX APPLIED HERE ---
                # Also apply the fix for the BSE data writing.
                safe_name = name.replace("'", "\\'")
                f.write(f"    '{safe_name}': '{ticker}',\n")
            f.write("}\n")
        print(f"-> Successfully created 'data/bse_tickers.py' with {len(bse_map)} entries.")

    except Exception as e:
        print(f"An error occurred while processing BSE file: {e}")


if __name__ == '__main__':
    create_ticker_files()
    print("\nData generation complete. You can now start your main application server.")

